{"version":3,"sources":["components/calculator/display/display.js","components/calculator/buttons/button/button.js","components/calculator/buttons/buttons.js","actions/calculate.js","components/calculator/calculator.js","App.js","serviceWorker.js","index.js"],"names":["Display","react_default","a","createElement","style","backgroundColor","color","textAlign","fontWeight","flex","width","fontSize","padding","this","props","value","React","Component","Button","clickEvent","_this","clickHandler","name","styles","border","margin","divStyles","display","orange","Object","assign","wide","last","marginRight","onClick","Buttons","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","buttonName","state","total","next","operation","component_buttons_div","marginBottom","flexDirection","flexWrap","button_button","calculate","checkOperator","numberOne","numberTwo","one","Big","two","plus","toString","minus","times","div","Error","concat","clear","filterKeys","temp","indexOf","isNaN","getNewState","obj","newState","isNumber","result","includes","parseFloat","number","test","Calculator","setState","Calculate","_this2","height","onKeyDown","e","key","buttons","App","calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80663c18.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\n\r\nclass Display extends React.Component {\r\n\r\n  render() {\r\n\r\n    const outerStyle = {\r\n        backgroundColor: '#858694',\r\n        color: 'white',\r\n        textAlign: 'right',\r\n        fontWeight: '200',\r\n        flex: '0 0 auto',\r\n        width: '100%'\r\n      };\r\n\r\n      const innerStyle = {\r\n        fontSize: '2.5rem',\r\n        padding: '0.2rem 0.7rem 0.1rem 0.5rem'\r\n      };\r\n\r\n    return (\r\n      <div style={outerStyle} >\r\n        <div style={innerStyle} >{this.props.value}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\n\r\nclass Button extends React.Component {\r\n\r\n  clickEvent = () => {\r\n    this.props.clickHandler(this.props.name);\r\n  };\r\n\r\n  render() {\r\n    const component_button = {\r\n        display: 'inline-flex',\r\n        width: '25%',\r\n        flex: '1 0 auto'\r\n      };\r\n\r\n    const component_button_wide = {\r\n        width: '50%'\r\n    }\r\n\r\n    const component_button_button = {\r\n        backgroundColor: '#e0e0e0',\r\n        border: '0',\r\n        fontSize: '1.5rem',\r\n        margin: '0 1px 0 0',\r\n        flex: '1 0 auto',\r\n        padding: '0'\r\n      }\r\n\r\n    const component_button_last_child_button = {\r\n        marginRight: '0'\r\n      }\r\n\r\n    const component_button_orange_button = {\r\n        backgroundColor: '#f5923e',\r\n        color: 'white'\r\n      }\r\n\r\n      let styles = component_button_button;\r\n      let divStyles = component_button;\r\n\r\n      if(this.props.orange) styles = Object.assign(styles, component_button_orange_button);\r\n      if(this.props.wide) divStyles = Object.assign(divStyles, component_button_wide);\r\n      if(this.props.last) styles = Object.assign(styles, component_button_last_child_button);\r\n\r\n    return (\r\n      <div style={divStyles}>\r\n        <button style={styles} onClick={this.clickEvent}>{this.props.name}</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\nimport Button from \"./button/button\";\r\n\r\nclass Buttons extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      total: null,\r\n      next: null,\r\n      operation: null,\r\n    };\r\n  }\r\n\r\n  handleClick = buttonName => {\r\n    this.props.clickHandler(buttonName);\r\n  };\r\n\r\n  render() {\r\n\r\n    const component_buttons = {\r\n        backgroundColor: '#858694',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap',\r\n        flex: '1 0 auto'\r\n      }\r\n\r\n      const component_buttons_div = {\r\n        width: '100%',\r\n        marginBottom: '1px',\r\n        flex: '1 0 auto',\r\n        display: 'flex'\r\n      }\r\n\r\n    return (\r\n      <div style={component_buttons}>\r\n        <div style={component_buttons_div}>\r\n          <Button name=\"AC\" clickHandler={this.handleClick} />\r\n          <Button name=\"+/-\" clickHandler={this.handleClick} />\r\n          <Button name=\"%\" clickHandler={this.handleClick} />\r\n          <Button name=\"÷\" clickHandler={this.handleClick} orange />\r\n        </div>\r\n        <div style={component_buttons_div}>\r\n          <Button name=\"7\" clickHandler={this.handleClick} />\r\n          <Button name=\"8\" clickHandler={this.handleClick} />\r\n          <Button name=\"9\" clickHandler={this.handleClick} />\r\n          <Button name=\"x\" clickHandler={this.handleClick} orange />\r\n        </div>\r\n        <div style={component_buttons_div}>\r\n          <Button name=\"4\" clickHandler={this.handleClick} />\r\n          <Button name=\"5\" clickHandler={this.handleClick} />\r\n          <Button name=\"6\" clickHandler={this.handleClick} />\r\n          <Button name=\"-\" clickHandler={this.handleClick} orange />\r\n        </div>\r\n        <div style={component_buttons_div}>\r\n          <Button name=\"1\" clickHandler={this.handleClick} />\r\n          <Button name=\"2\" clickHandler={this.handleClick} />\r\n          <Button name=\"3\" clickHandler={this.handleClick} />\r\n          <Button name=\"+\" clickHandler={this.handleClick} orange />\r\n        </div>\r\n        <div style={component_buttons_div}>\r\n          <Button name=\"0\" clickHandler={this.handleClick} wide />\r\n          <Button name=\".\" clickHandler={this.handleClick} />\r\n          <Button name=\"=\" clickHandler={this.handleClick} orange last />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buttons;\r\n","import Big from \"big.js\";\r\n\r\nclass Calculate {\r\n\r\n    /**\r\n     * Takes the current value and the next value\r\n     * and performs the passed operation.\r\n     */\r\n    checkOperator = (numberOne, numberTwo, operation) => {\r\n        const one = Big(numberOne || \"0\");\r\n        const two = Big(numberTwo || \"0\");\r\n        let total = null;\r\n\r\n        if (operation === \"+\") {\r\n            total = one.plus(two).toString();\r\n        }\r\n        if (operation === \"-\") {\r\n            total = one.minus(two).toString();\r\n        }\r\n        if (operation === \"x\") {\r\n            total = one.times(two).toString();\r\n        }\r\n        if (operation === \"÷\") {\r\n            if (two === \"0\") {\r\n                total =  two;\r\n            } else {\r\n                total = one.div(two).toString();\r\n            }\r\n        }\r\n        if(total === null) throw Error(`Unknown operation '${operation}'`);\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * Creates a default state object to clear\r\n     * the calculator component.\r\n    */\r\n    clear = () => {\r\n        return {\r\n            total: null,\r\n            next: null,\r\n            operation: null,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Filters the buttonName to prevent incorrect\r\n     * values from attempting to be calculated.\r\n     */\r\n    filterKeys = (buttonName) => {\r\n        let temp = buttonName;\r\n        let operators = [\"x\", \"+\", \"-\", \"/\", \"=\", \"%\", \"AC\", \"+/-\"]\r\n\r\n        if(temp === \"Enter\") {\r\n            temp = \"=\";\r\n        }\r\n        else if(operators.indexOf(temp) === -1 && isNaN(temp)) {\r\n            temp = null;\r\n        }\r\n        return temp;\r\n    }\r\n    /**\r\n     * Performs a number of checks to determine the\r\n     * new State.\r\n     */\r\n    getNewState = (obj, buttonName) => {\r\n\r\n        let newState = null;\r\n        buttonName = this.filterKeys(buttonName);\r\n\r\n        //Failed the filtering proccess.\r\n        if(buttonName === null) {\r\n            newState = {}\r\n        }\r\n        else if (buttonName === \"AC\") {\r\n            newState = this.clear();\r\n        }\r\n        else if (this.isNumber(buttonName)) {\r\n            if (buttonName === \"0\" && obj.next === \"0\") {\r\n                newState = {};\r\n            }\r\n            else if (obj.operation) {\r\n                if (obj.next) {\r\n                    newState = { next: obj.next + buttonName };\r\n                }\r\n                else {\r\n                    newState = { next: buttonName };\r\n                }\r\n            }\r\n            else if (obj.next) {\r\n                newState = {\r\n                    next: obj.next + buttonName,\r\n                    total: null,\r\n                };\r\n            }\r\n            else {\r\n                newState = {\r\n                    next: buttonName,\r\n                    total: null,\r\n                };\r\n            }\r\n        }\r\n        else if (buttonName === \"%\") {\r\n            if (obj.operation && obj.next) {\r\n                const result = this.checkOperator(obj.total, obj.next, obj.operation);\r\n                newState = {\r\n                    total: Big(result)\r\n                    .div(Big(\"100\"))\r\n                    .toString(),\r\n                    next: null,\r\n                    operation: null,\r\n                };\r\n            }\r\n            else if (obj.next) {\r\n                newState = {\r\n                    next: Big(obj.next)\r\n                    .div(Big(\"100\"))\r\n                    .toString(),\r\n                };\r\n            }\r\n            else {\r\n                newState = {};\r\n            }\r\n        }\r\n        else if (buttonName === \".\") {\r\n            if (obj.next) {\r\n                // Ignores multiple decimal inputs\r\n                if (obj.next.includes(\".\")) {\r\n                    newState = {};\r\n                }\r\n                else {\r\n                    newState = { next: obj.next + \".\" };\r\n                }\r\n            }\r\n            else {\r\n                newState = { next: \"0.\" };\r\n            }\r\n        }\r\n        else if (buttonName === \"=\") {\r\n            if (obj.next && obj.operation) {\r\n                newState = {\r\n                    total: this.checkOperator(obj.total, obj.next, obj.operation),\r\n                    next: null,\r\n                    operation: null,\r\n                };\r\n            } else {\r\n                newState = {};\r\n            }\r\n        }\r\n        else if (buttonName === \"+/-\") {\r\n            if (obj.next) {\r\n                newState = { next: (-1 * parseFloat(obj.next)).toString() };\r\n            }\r\n            else if (obj.total) {\r\n                newState = { total: (-1 * parseFloat(obj.total)).toString() };\r\n            }\r\n            else {\r\n                newState = {};\r\n            }\r\n        }\r\n        //Replaces operation if there is no Next.\r\n        else if(obj.operation && !obj.next) {\r\n            newState = {\r\n                operation: buttonName,\r\n            };\r\n        }\r\n        // User pressed an operation button and there is an existing operation and next.\r\n        else if (obj.operation) {\r\n            newState = {\r\n                total: this.checkOperator(obj.total, obj.next, obj.operation),\r\n                next: null,\r\n                operation: buttonName,\r\n            };\r\n        }\r\n        else {\r\n            // No previous total value. Save operation and save next as total.\r\n            newState = {\r\n                total: obj.next,\r\n                next: null,\r\n                operation: buttonName,\r\n            };\r\n        }\r\n        return newState;\r\n    }\r\n\r\n    /**\r\n     * Checks if the argument is a number.\r\n     */\r\n    isNumber = (number) => {\r\n        return /[0-9]+/.test(number);\r\n    }\r\n}\r\n\r\nexport default new Calculate();\r\n","import React, { Component } from 'react';\r\nimport Display from \"./display/display\";\r\nimport Buttons from './buttons/buttons';\r\nimport Calculate from '../../actions/calculate'\r\n\r\nclass Calculator extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      total: null,\r\n      next: null,\r\n      operation: null,\r\n    };\r\n  }\r\n\r\n  handleClick = buttonName => {\r\n    this.setState(Calculate.getNewState(this.state, Calculate.filterKeys(buttonName)));\r\n  };\r\n\r\n  render() {\r\n      const container = {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        flexWrap: 'wrap',\r\n        height: '100%'\r\n      }\r\n\r\n    return (\r\n    <div style={container} onKeyDown={(e) => this.handleClick(e.key)} >\r\n      <Display value={this.state.next || this.state.total || \"0\"} />\r\n      <Buttons clickHandler={this.handleClick} />\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Calculator from './components/calculator/calculator';\n\nclass App extends Component {\n  render() {\n    return (\n      <Calculator/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}